library(tidyr)
df <- drop_na(df)
summary(df)
df <- df %>% filter(DD<=360)
library(shiny)
library(leaflet)
library(dplyr)
library(sf)
library(leaflet.extras)
# Seleccionar un día aleatorio en el que haya llovia en alguna estación
set.seed(123)
df_dia_lluvioso <- df %>%
filter(Precipitacion. > 0) %>%
select(FECHA) %>%
distinct() %>%
sample_n(1)
dia_seleccionado <- df_dia_lluvioso$FECHA[1]
datos_dia <- df %>%
filter(as.Date(FECHA) == dia_seleccionado)
# UI de Shiny
ui <- fluidPage(
titlePanel("Mapa de Estaciones Meteorológicas con Capas por Variable"),
sidebarLayout(
sidebarPanel(
sliderInput("hora", "Selecciona la Hora:",
min = 0, max = 23, value = 12, step = 1, round = 0,
sep = "", animate = TRUE),
checkboxGroupInput("layers", "Selecciona Capas a Mostrar:",
choices = list("Temperatura" = "temp",
"Lluvia" = "rain",
"Dirección del Viento" = "wind"),
selected = c("temp", "rain", "wind"))
),
mainPanel(
leafletOutput("mapa")
)
)
)
# Servidor de Shiny
server <- function(input, output, session) {
datos_filtrados <- reactive({
datos_dia %>% filter(HORA == input$hora)
})
output$mapa <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = mean(datos_dia$Longitud), lat = mean(datos_dia$Latitud), zoom = 6)
})
observe({
data <- datos_filtrados()
leafletProxy("mapa", data = data) %>%
clearMarkers() %>%
clearShapes()
# Capa de Temperatura
if ("temp" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("RdYlGn", TEMP, reverse = TRUE)(TEMP),
radius = 5,
group = "Temperatura",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Capa de Lluvia
if ("rain" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("Blues", Precipitacion.)(Precipitacion.),
radius = 5,
group = "Lluvia",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Agregar controles de capas
leafletProxy("mapa") %>%
addLayersControl(
overlayGroups = c("Temperatura", "Lluvia"),
options = layersControlOptions(collapsed = FALSE)
)
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(dplyr)
library(lubridate)
# Cargar tus datos (asegúrate de que el DataFrame 'df' contenga tus datos)
# df <- read.csv("tu_archivo.csv")  # Descomenta y ajusta según sea necesario
# Comprobación de datos
if (any(is.na(df$TEMP))) {
stop("Hay valores NA en la columna de Temperatura.")
}
if (any(is.na(df$FECHA))) {
stop("Hay valores NA en la columna de fechas.")
}
# Calcular la Temperatura promedio por mes y año
df$year_month <- floor_date(df$FECHA, "month")
temp_promedio <- df %>%
group_by(year_month, Latitud, Longitud, NOMBRE) %>%
summarise(average_temp = mean(TEMP, na.rm = TRUE), .groups = 'drop')
# Comprobación de si temp_promedio tiene datos
if (nrow(temp_promedio) == 0) {
stop("No hay datos disponibles para mostrar.")
}
# UI de Shiny
ui <- fluidPage(
titlePanel("Temperatura Promedio por Mes y Año"),
sidebarLayout(
sidebarPanel(
sliderInput("year_month", "Selecciona el Mes y Año:",
min = min(temp_promedio$year_month, na.rm = TRUE),
max = max(temp_promedio$year_month, na.rm = TRUE),
value = min(temp_promedio$year_month, na.rm = TRUE),
timeFormat = "%Y-%m",
animate = TRUE)
),
mainPanel(
leafletOutput("mapa")
)
)
)
# Servidor de Shiny
server <- function(input, output, session) {
output$mapa <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = -64, lat = -38, zoom = 4)  # Ajusta la vista inicial
})
observe({
datos_filtrados <- temp_promedio %>%
filter(year_month == input$year_month)
if (nrow(datos_filtrados) > 0) {
leafletProxy("mapa", data = datos_filtrados) %>%
clearMarkers() %>%
clearControls() %>%
addCircleMarkers(
~Longitud, ~Latitud,
radius = 6,
color = ~colorNumeric("RdYlBu", average_temp, reverse = TRUE)(average_temp),
fillOpacity = 0.7,
popup = ~paste("Estación:", NOMBRE, "<br>",
"Temperatura Promedio:", round(average_temp, 2), "°C")
) %>%
addLegend(pal = colorNumeric("RdYlBu", NULL, reverse = TRUE), values = ~average_temp,
position = "bottomright", title = "Temperatura Promedio (°C)")
}
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(dplyr)
library(sf)
library(leaflet.extras)
# Seleccionar un día aleatorio en el que haya llovia en alguna estación
set.seed(123)
df_dia_lluvioso <- df %>%
filter(Precipitacion. > 0) %>%
select(FECHA) %>%
distinct() %>%
sample_n(1)
dia_seleccionado <- df_dia_lluvioso$FECHA[1]
datos_dia <- df %>%
filter(as.Date(FECHA) == dia_seleccionado)
# UI de Shiny
ui <- fluidPage(
titlePanel("Mapa de Estaciones Meteorológicas con Capas por Variable"),
sidebarLayout(
sidebarPanel(
sliderInput("hora", "Selecciona la Hora:",
min = 0, max = 23, value = 12, step = 1, round = 0,
sep = "", animate = TRUE),
checkboxGroupInput("layers", "Selecciona Capas a Mostrar:",
choices = list("Temperatura" = "temp",
"Lluvia" = "rain",
"Dirección del Viento" = "wind"),
selected = c("temp", "rain", "wind"))
),
mainPanel(
leafletOutput("mapa")
)
)
)
# Servidor de Shiny
server <- function(input, output, session) {
datos_filtrados <- reactive({
datos_dia %>% filter(HORA == input$hora)
})
output$mapa <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = mean(datos_dia$Longitud), lat = mean(datos_dia$Latitud), zoom = 6)
})
observe({
data <- datos_filtrados()
leafletProxy("mapa", data = data) %>%
clearMarkers() %>%
clearShapes()
# Capa de Temperatura
if ("temp" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("RdYlGn", TEMP, reverse = TRUE)(TEMP),
radius = 5,
group = "Temperatura",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Capa de Lluvia
if ("rain" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("Blues", Precipitacion.)(Precipitacion.),
radius = 5,
group = "Lluvia",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Agregar controles de capas
leafletProxy("mapa") %>%
addLayersControl(
overlayGroups = c("Temperatura", "Lluvia"),
options = layersControlOptions(collapsed = FALSE)
)
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(dplyr)
library(sf)
library(leaflet.extras)
# Seleccionar un día aleatorio en el que haya llovia en alguna estación
set.seed(123)
df_dia_lluvioso <- df %>%
filter(Precipitacion. > 0) %>%
select(FECHA) %>%
distinct() %>%
sample_n(1)
dia_seleccionado <- df_dia_lluvioso$FECHA[1]
datos_dia <- df %>%
filter(as.Date(FECHA) == dia_seleccionado)
# UI de Shiny
ui <- fluidPage(
titlePanel("Mapa de Estaciones Meteorológicas con Capas por Variable"),
sidebarLayout(
sidebarPanel(
sliderInput("hora", "Selecciona la Hora:",
min = 0, max = 23, value = 12, step = 1, round = 0,
sep = "", animate = TRUE),
checkboxGroupInput("layers", "Selecciona Capas a Mostrar:",
choices = list("Temperatura" = "temp",
"Lluvia" = "rain",
"Dirección del Viento" = "wind"),
selected = c("temp", "rain", "wind"))
),
mainPanel(
leafletOutput("mapa")
)
)
)
# Servidor de Shiny
server <- function(input, output, session) {
datos_filtrados <- reactive({
datos_dia %>% filter(HORA == input$hora)
})
output$mapa <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = mean(datos_dia$Longitud), lat = mean(datos_dia$Latitud), zoom = 6)
})
observe({
data <- datos_filtrados()
leafletProxy("mapa", data = data) %>%
clearMarkers() %>%
clearShapes()
# Capa de Temperatura
if ("temp" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("RdYlGn", TEMP, reverse = TRUE)(TEMP),
radius = 5,
group = "Temperatura",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Capa de Lluvia
if ("rain" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("Blues", Precipitacion.)(Precipitacion.),
radius = 5,
group = "Lluvia",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Agregar controles de capas
leafletProxy("mapa") %>%
addLayersControl(
overlayGroups = c("Temperatura", "Lluvia"),
options = layersControlOptions(collapsed = FALSE)
)
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(dplyr)
library(sf)
library(leaflet.extras)
# Seleccionar un día aleatorio en el que haya llovia en alguna estación
set.seed(123)
df_dia_lluvioso <- df %>%
filter(Precipitacion. > 0) %>%
select(FECHA) %>%
distinct() %>%
sample_n(1)
dia_seleccionado <- df_dia_lluvioso$FECHA[1]
datos_dia <- df %>%
filter(as.Date(FECHA) == dia_seleccionado)
# UI de Shiny
ui <- fluidPage(
titlePanel("Mapa de Estaciones Meteorológicas con Capas por Variable"),
sidebarLayout(
sidebarPanel(
sliderInput("hora", "Selecciona la Hora:",
min = 0, max = 23, value = 12, step = 1, round = 0,
sep = "", animate = TRUE),
checkboxGroupInput("layers", "Selecciona Capas a Mostrar:",
choices = list("Temperatura" = "temp",
"Lluvia" = "rain",
"Dirección del Viento" = "wind"),
selected = c("temp", "rain", "wind"))
),
mainPanel(
leafletOutput("mapa")
)
)
)
# Servidor de Shiny
server <- function(input, output, session) {
datos_filtrados <- reactive({
datos_dia %>% filter(HORA == input$hora)
})
output$mapa <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = mean(datos_dia$Longitud), lat = mean(datos_dia$Latitud), zoom = 6)
})
observe({
data <- datos_filtrados()
leafletProxy("mapa", data = data) %>%
clearMarkers() %>%
clearShapes()
# Capa de Temperatura
if ("temp" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("RdYlGn", TEMP, reverse = TRUE)(TEMP),
radius = 5,
group = "Temperatura",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Capa de Lluvia
if ("rain" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("Blues", Precipitacion.)(Precipitacion.),
radius = 5,
group = "Lluvia",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Agregar controles de capas
leafletProxy("mapa") %>%
addLayersControl(
overlayGroups = c("Temperatura", "Lluvia"),
options = layersControlOptions(collapsed = FALSE)
)
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(dplyr)
library(lubridate)
# Cargar tus datos (asegúrate de que el DataFrame 'df' contenga tus datos)
# df <- read.csv("tu_archivo.csv")  # Descomenta y ajusta según sea necesario
# Comprobación de datos
if (any(is.na(df$TEMP))) {
stop("Hay valores NA en la columna de Temperatura.")
}
if (any(is.na(df$FECHA))) {
stop("Hay valores NA en la columna de fechas.")
}
# Calcular la Temperatura promedio por mes y año
df$year_month <- floor_date(df$FECHA, "month")
temp_promedio <- df %>%
group_by(year_month, Latitud, Longitud, NOMBRE) %>%
summarise(average_temp = mean(TEMP, na.rm = TRUE), .groups = 'drop')
# Comprobación de si temp_promedio tiene datos
if (nrow(temp_promedio) == 0) {
stop("No hay datos disponibles para mostrar.")
}
# UI de Shiny
ui <- fluidPage(
titlePanel("Temperatura Promedio por Mes y Año"),
sidebarLayout(
sidebarPanel(
sliderInput("year_month", "Selecciona el Mes y Año:",
min = min(temp_promedio$year_month, na.rm = TRUE),
max = max(temp_promedio$year_month, na.rm = TRUE),
value = min(temp_promedio$year_month, na.rm = TRUE),
timeFormat = "%Y-%m",
animate = TRUE)
),
mainPanel(
leafletOutput("mapa")
)
)
)
# Servidor de Shiny
server <- function(input, output, session) {
output$mapa <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = -64, lat = -38, zoom = 4)  # Ajusta la vista inicial
})
observe({
datos_filtrados <- temp_promedio %>%
filter(year_month == input$year_month)
if (nrow(datos_filtrados) > 0) {
leafletProxy("mapa", data = datos_filtrados) %>%
clearMarkers() %>%
clearControls() %>%
addCircleMarkers(
~Longitud, ~Latitud,
radius = 6,
color = ~colorNumeric("RdYlBu", average_temp, reverse = TRUE)(average_temp),
fillOpacity = 0.7,
popup = ~paste("Estación:", NOMBRE, "<br>",
"Temperatura Promedio:", round(average_temp, 2), "°C")
) %>%
addLegend(pal = colorNumeric("RdYlBu", NULL, reverse = TRUE), values = ~average_temp,
position = "bottomright", title = "Temperatura Promedio (°C)")
}
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
