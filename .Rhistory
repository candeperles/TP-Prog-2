df <- read.rds("C://Users//anapa//OneDrive//Escritorio//facu//progii//TP-Prog-2//dataset_smn.rds")
df <- readRDS("C://Users//anapa//OneDrive//Escritorio//facu//progii//TP-Prog-2//dataset_smn.rds")
head(df)
summary(df)
df$Precipitacion. <- as.numeric(df$Precipitacion.)
summary(df)
View(df)
View(df)
library(dplyr)
df <- df %>% select(-PNM)
library(dplyr)
data <- subset(data, select = -PNM)
library(dplyr)
# Remove Column2
df <- df %>% select(-PNM)
# Remove Column2
df <- df %>% select(-PNM)
# Remove Column2
df <- df %>% select(-PNM)
df$PNM <- NULL
View(df)
df <- readRDS("C://Users//anapa//OneDrive//Escritorio//facu//progii//TP-Prog-2//dataset_smn.rds")
df$Precipitacion. <- as.numeric(df$Precipitacion.)
head(df)
summary(df)
df$PNM <- NULL
View(df)
n <- nrow(df)
library(dplyr)
library(tidyr)
df <- drop_na(df)
View(df)
library(dplyr)
library(tidyr)
df <- drop_na(df)
summary(df)
df <- df %>% filter(DD<=360)
View(df)
# Load the required package
library(plotly)
# Create the interactive plot with dropdown
fig <- plot_ly(df, type = 'histogram') %>%
layout(
updatemenus = list(
list(
buttons = list(
list(method = "restyle",
args = list("x", list(df$TEMP)),
label = "Temperatura"),
list(method = "restyle",
args = list("x", list(df$HUM)),
label = "Humedad"),
list(method = "restyle",
args = list("x", list(df$FF)),
label = "Fuerza del Viento"),
list(method = "restyle",
args = list("x", list(df$Altura)),
label = "Altura"),
list(method = "restyle",
args = list("x", list(df$Precipitacion.)),
label = "Precipitacion")
),
direction = "down",
x = 0.1,
xanchor = "left",
y = 1.2,
yanchor = "top"
)
)
)
fig
# Load the required package
library(plotly)
# Create the interactive plot with dropdown
fig <- plot_ly(df, type = 'histogram') %>%
layout(
updatemenus = list(
list(
buttons = list(
list(method = "restyle",
args = list("x", list(df$TEMP)),
label = "Temperatura"),
list(method = "restyle",
args = list("x", list(df$HUM)),
label = "Humedad"),
list(method = "restyle",
args = list("x", list(df$FF)),
label = "Fuerza del Viento"),
list(method = "restyle",
args = list("x", list(df$Altura)),
label = "Altura"),
list(method = "restyle",
args = list("x", list(df$Precipitacion.)),
label = "Precipitacion")
),
direction = "down",
x = 0.1,
xanchor = "left",
y = 1.2,
yanchor = "top"
)
)
)
View(df)
columnas_factor <- c("NOMBRE","Provincia","Nro")
df <- df %>%
mutate_at(columnas_factor, .funs = factor)
# Función para determinar la estación del año en el hemisferio sur, aplicable a cualquier año
get_estacion <- function(fecha) {
# Extraer el año de la fecha
anio <- as.numeric(format(fecha, "%Y"))
# Definir los rangos de fechas para cada estación del año en el hemisferio sur
verano <- as.Date(paste(anio, "-12-21", sep = "")):as.Date(paste(anio + 1, "-03-20", sep = ""))
otono <- as.Date(paste(anio, "-03-21", sep = "")):as.Date(paste(anio, "-06-20", sep = ""))
invierno <- as.Date(paste(anio, "-06-21", sep = "")):as.Date(paste(anio, "-09-20", sep = ""))
primavera <- as.Date(paste(anio, "-09-21", sep = "")):as.Date(paste(anio, "-12-20", sep = ""))
# Determinar la estación según la fecha
if (fecha %in% verano) {
return("Verano")
} else if (fecha %in% otono) {
return("Otoño")
} else if (fecha %in% invierno) {
return("Invierno")
} else {
return("Primavera")
}
}
# Aplicar la función a la columna de fechas para crear una nueva columna con la estación
df$Estacion <- sapply(df$FECHA, get_estacion)
# Función para determinar la estación del año en el hemisferio sur, aplicable a cualquier año
get_estacion <- function(fecha) {
# Extraer el año de la fecha
anio <- as.numeric(format(fecha, "%Y"))
# Definir los rangos de fechas para cada estación del año en el hemisferio sur
verano <- as.Date(paste(anio, "-12-21", sep = "")):as.Date(paste(anio + 1, "-03-20", sep = ""))
otono <- as.Date(paste(anio, "-03-21", sep = "")):as.Date(paste(anio, "-06-20", sep = ""))
invierno <- as.Date(paste(anio, "-06-21", sep = "")):as.Date(paste(anio, "-09-20", sep = ""))
primavera <- as.Date(paste(anio, "-09-21", sep = "")):as.Date(paste(anio, "-12-20", sep = ""))
# Determinar la estación según la fecha
if (fecha %in% verano) {
return("Verano")
} else if (fecha %in% otono) {
return("Otoño")
} else if (fecha %in% invierno) {
return("Invierno")
} else {
return("Primavera")
}
}
# Aplicar la función a la columna de fechas para crear una nueva columna con la estación
df$Estacion <- sapply(df$FECHA, get_estacion)
dfgroup <- df %>% group_by(FECHA)
View(dfgroup)
# Función para determinar la estación del año en el hemisferio sur, aplicable a cualquier año
get_estacion <- function(fecha) {
# Extraer el año de la fecha
anio <- as.numeric(format(fecha, "%Y"))
# Definir los rangos de fechas para cada estación del año en el hemisferio sur
verano <- as.Date(paste(anio, "-12-21", sep = "")):as.Date(paste(anio + 1, "-03-20", sep = ""))
otono <- as.Date(paste(anio, "-03-21", sep = "")):as.Date(paste(anio, "-06-20", sep = ""))
invierno <- as.Date(paste(anio, "-06-21", sep = "")):as.Date(paste(anio, "-09-20", sep = ""))
primavera <- as.Date(paste(anio, "-09-21", sep = "")):as.Date(paste(anio, "-12-20", sep = ""))
# Determinar la estación según la fecha
if (fecha %in% verano) {
return("Verano")
} else if (fecha %in% otono) {
return("Otoño")
} else if (fecha %in% invierno) {
return("Invierno")
} else {
return("Primavera")
}
}
# Aplicar la función a la columna de fechas para crear una nueva columna con la estación
df$Estacion <- sapply(df$FECHA, get_estacion)
