library(readr)
precip <- read_csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv")
#df <- df1 %>%
#inner_join(precip, join_by(Nro == Nombre))
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv",
header=FALSE, sep=",")
colnames(precip) <- c("Estacion", "Fecha", "Precipitacion_mm")
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//formatted_smn_precipitaciones.csv", sep=",")
#df <- df1 %>%
#inner_join(precip, join_by(Nro == Nombre))
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//formatted_smn_precipitaciones.csv",
header=TRUE, sep=",", stringsAsFactors=FALSE)
#df <- df1 %>%
#inner_join(precip, join_by(Nro == Nombre))
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//formatted_smn_precipitaciones.csv", header=TRUE, sep=",", stringsAsFactors=FALSE, fileEncoding="UTF-8")
#df <- df1 %>%
#inner_join(precip, join_by(Nro == Nombre))
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", header=TRUE, sep=",", stringsAsFactors=FALSE, fileEncoding="UTF-8")
#df <- df1 %>%
#inner_join(precip, join_by(Nro == Nombre))
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv")
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
# Remove ";" characters from the Precipitacion_mm column
precip$Precipitacion_mm <- gsub(";", "", precip$Precipitacion_mm)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
# Remove ";" characters from the Precipitacion_mm column
precip$Precipitacion <- gsub(";", "", precip$Precipitacion)
# Convert Precipitacion_mm column to numeric (if needed)
precip$Precipitacion <- as.numeric(precip$Precipitacion)
# Check the cleaned data
head(precip)
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
# Remove ";" characters from the Precipitacion_mm column
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
# Convert Precipitacion_mm column to numeric (if needed)
precip$Precipitacion. <- as.numeric(precip$Precipitacion.)
# Check the cleaned data
head(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
View(df1)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
df <- df1 %>% inner_join(precip, join_by = (Nro = Estacion))
View(estaciones)
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
df <- df1 %>%
inner_join(precip, join_by(Nro == Estacion))
View(df1)
View(precip)
View(df1)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
df <- df1 %>%
left_join(precip, join_by(Nro == Estacion))
View(df1)
?left_join
View(precip)
View(df1)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
df <- df1 %>%
left_join(precip, join_by(Nro == Estacion, FECHA == Fecha))
precip$Fecha <- as.Date(datos$FECHA, format = "%d%m%Y")
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
precip$Fecha <- as.Date(precip$Fecha, format = "%d%m%Y")
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
df <- df1 %>%
left_join(precip, join_by(Nro == Estacion, FECHA == Fecha))
head(df)
View(df)
glimpse(df)
precip$Precipitacion. <- as.numeric(Precipitacion.)
precip$Precipitacion. <- as.numeric(precip$Precipitacion.)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
precip$Fecha <- as.Date(precip$Fecha, format = "%d%m%Y")
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
precip$Precipitacion. <- as.numeric(precip$Precipitacion.)
df <- df1 %>%
left_join(precip, join_by(Nro == Estacion, FECHA == Fecha))
head(df)
View(df)
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
View(precip)
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
View(precip)
precip$Fecha <- as.Date(precip$Fecha, format = "%Y%m%d")
View(precip)
precip <- read.csv("C://Users//anapa//OneDrive//Escritorio//facu//progii//smn_precipitaciones.csv", sep=",")
precip$Precipitacion. <- gsub(";", "", precip$Precipitacion.)
precip$Fecha <- as.Date(precip$Fecha)
View(precip)
View(precip)
df <- df1 %>%
left_join(precip, join_by(Nro == Estacion, FECHA == Fecha))
head(df)
View(precip)
df <- df1 %>%
inner_join(precip, join_by(Nro == Estacion, FECHA == Fecha))
head(df)
View(df)
saveRDS(df, file ="C://Users//anapa//OneDrive//Escritorio//facu//progii//dataset_smn.rds")
View(df)
library(ggplot2)
library(dplyr)
p1 <- ggplot(df, aes(x = Estacion, y = TEMP, fill = Estacion)) +
geom_boxplot() +
labs(title = "Distribución de temperatura por estación", x = "Estación", y = "Temperatura") +
theme_minimal()
p1
#
# Definimos una funcion que indique la estacion en base a la fecha
get_estacion <- function(fecha) {
# Nos quedamos solo con dia y mes
mes <- as.integer(format(fecha, "%m"))
dia <- as.integer(format(fecha, "%d"))
# determinamos la estacion en base a estos datos
if ((mes == 12 && dia >= 21) || mes %in% c(1, 2) || (mes == 3 && dia <= 20)) {
return("Verano")
} else if ((mes == 3 && dia >= 21) || mes %in% c(4, 5) || (mes == 6 && dia <= 20)) {
return("Otoño")
} else if ((mes == 6 && dia >= 21) || mes %in% c(7, 8) || (mes == 9 && dia <= 20)) {
return("Invierno")
} else {
return("Primavera")
}
}
# Lo aplicamos al dataset
df$Estacion <- sapply(df$FECHA, get_estacion)
# Lo pasamos de character a factor
df$Estacion <- as.factor(df$Estacion)
#Visualizamos
summary(df$Estacion)
library(dplyr)
# Función para calcular amplitud térmica diaria
calcular_amplitud_termica <- function(df) {
df <- df %>%
# Agrupar por día y estación
group_by(FECHA, NOMBRE) %>%
# Calcular la amplitud térmica diaria
summarize(AmplitudTermica = max(TEMP) - min(TEMP), .groups = 'drop') %>%
# Unir la amplitud térmica calculada de vuelta a cada registro horario original
right_join(df, by = c("FECHA", "NOMBRE"))
return(df)
}
# Aplicar la función al dataset
df <- calcular_amplitud_termica(df)
df$AmplitudTermica <- as.numeric(df$AmplitudTermica)
library(ggplot2)
library(dplyr)
p1 <- ggplot(df, aes(x = Estacion, y = TEMP, fill = Estacion)) +
geom_boxplot() +
labs(title = "Distribución de temperatura por estación", x = "Estación", y = "Temperatura") +
theme_minimal()
p1
p2 <- ggplot(df, aes(x = Estacion, y = HUM, fill = Estacion)) +
geom_boxplot() +
labs(title = "Distribución de humedad por estación", x = "Estación", y = "Humedad") +
theme_minimal()
p2
library(ggplot2)
p5 <- df %>%
group_by(Estacion) %>%
summarise(promedio_precipitacion = mean(Precipitacion.)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y= "Promedio Precipitaciones",title = "Promedio de precipitaciones por Estacion")
p5
library(ggplot2)
p5 <- df %>%
group_by(Estacion) %>%
summarise(promedio_precipitacion = mean(Precipitacion.)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(y= "Promedio Precipitaciones",title = "Promedio de precipitaciones por Estacion")
p5
library(ggplot2)
library(dplyr)
p3 <- ggplot(df, aes(x = TEMP, y = HUM, color = Estacion)) +
geom_point(alpha = 0.6) +
labs(title = "Scatter plot de Temperatura vs Humedad", x = "Temperatura", y = "Humedad") +
theme_minimal()
p3
p5 <- df %>%
group_by(Estacion) %>%
summarise(promedio_precipitacion = mean(Precipitacion., na.rm = TRUE)) %>%
filter(!is.na(promedio_precipitacion)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
y = "Promedio Precipitaciones",
title = "Promedio de precipitaciones por Estacion"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5
p5 <- df %>%
group_by(Estacion) %>%
summarise(promedio_precipitacion = mean(Precipitacion., na.rm = TRUE)) %>%
filter(!is.na(promedio_precipitacion)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
y = "Promedio Precipitaciones",
title = "Promedio de precipitaciones por Estacion"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5
p5 <- df %>%
group_by(Estacion) %>%
summarise(promedio_precipitacion = mean(Precipitacion., na.rm = TRUE)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
y = "Promedio Precipitaciones",
title = "Promedio de precipitaciones por Estacion"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5
p5 <- df %>%
group_by(Estacion) %>%
filter(!is.na(promedio_precipitacion)) %>%
summarise(promedio_precipitacion = mean(Precipitacion., na.rm = TRUE)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
y = "Promedio Precipitaciones",
title = "Promedio de precipitaciones por Estacion"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5 <- df %>%
group_by(Estacion) %>%
filter(!is.na(Precipitacion.)) %>%
summarise(promedio_precipitacion = mean(Precipitacion., na.rm = TRUE)) %>%
filter(!is.na(promedio_precipitacion)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
y = "Promedio Precipitaciones",
title = "Promedio de precipitaciones por Estacion"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p5
dplyr::last_dplyr_warnings()
# Convert 'Precipitacion.' to numeric, handling factors or characters
df$Precipitacion. <- as.numeric(as.character(df$Precipitacion.))
# Verificar la conversión
if (any(is.na(df$Precipitacion.))) {
warning("Hay valores NA en la columna 'Precipitacion.' después de la conversión.")
}
# Crear el gráfico después de la conversión
p5 <- df %>%
group_by(Estacion) %>%
summarise(promedio_precipitacion = mean(Precipitacion., na.rm = TRUE)) %>%
filter(!is.na(promedio_precipitacion)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
y = "Promedio Precipitaciones",
title = "Promedio de precipitaciones por Estacion"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Mostrar el gráfico
print(p5)
p5 <- df %>%
group_by(Estacion) %>%
summarise(promedio_precipitacion = mean(Precipitacion., na.rm = TRUE)) %>%
filter(!is.na(promedio_precipitacion)) %>%
ggplot(aes(x = Estacion, y = promedio_precipitacion, fill = Estacion)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(
y = "Promedio Precipitaciones",
title = "Promedio de precipitaciones por Estacion"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
p5
library(shiny)
library(leaflet)
library(dplyr)
library(sf)
library(leaflet.extras)
# Seleccionar un día aleatorio en el que haya llovia en alguna estación
set.seed(123)
df_dia_lluvioso <- df %>%
filter(Precipitacion. > 0) %>%
select(FECHA) %>%
distinct() %>%
sample_n(1)
dia_seleccionado <- df_dia_lluvioso$FECHA[1]
datos_dia <- df %>%
filter(as.Date(FECHA) == dia_seleccionado)
# UI de Shiny
ui <- fluidPage(
titlePanel("Mapa de Estaciones Meteorológicas con Capas por Variable"),
sidebarLayout(
sidebarPanel(
sliderInput("hora", "Selecciona la Hora:",
min = 0, max = 23, value = 12, step = 1, round = 0,
sep = "", animate = TRUE),
checkboxGroupInput("layers", "Selecciona Capas a Mostrar:",
choices = list("Temperatura" = "temp",
"Lluvia" = "rain",
"Dirección del Viento" = "wind"),
selected = c("temp", "rain", "wind"))
),
mainPanel(
leafletOutput("mapa")
)
)
)
# Servidor de Shiny
server <- function(input, output, session) {
datos_filtrados <- reactive({
datos_dia %>% filter(HORA == input$hora)
})
output$mapa <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
setView(lng = mean(datos_dia$Longitud), lat = mean(datos_dia$Latitud), zoom = 6)
})
observe({
data <- datos_filtrados()
leafletProxy("mapa", data = data) %>%
clearMarkers() %>%
clearShapes()
# Capa de Temperatura
if ("temp" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("RdYlGn", TEMP, reverse = TRUE)(TEMP),
radius = 5,
group = "Temperatura",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Capa de Lluvia
if ("rain" %in% input$layers) {
leafletProxy("mapa", data = data) %>%
addCircleMarkers(
~Longitud, ~Latitud,
color = ~colorNumeric("Blues", Precipitacion.)(Precipitacion.),
radius = 5,
group = "Lluvia",
popup = ~paste(
"<b>Estación:</b>", NOMBRE, "<br>",
"<b>Temperatura:</b>", TEMP, "°C", "<br>",
"<b>Lluvia:</b>", Precipitacion., "mm", "<br>",
"<b>Fuerza del viento:</b>", FF, "km/h", "<br>",
"<b>Dirección del viento:</b>", DD, "°"
)
)
}
# Agregar controles de capas
leafletProxy("mapa") %>%
addLayersControl(
overlayGroups = c("Temperatura", "Lluvia"),
options = layersControlOptions(collapsed = FALSE)
)
})
}
# Ejecutar la aplicación
shinyApp(ui, server)
# Reducir datos
df_sub <- df %>% tail(100000)
library(dplyr)
library(prophet)
# Reducir datos
df_sub <- df %>% tail(100000)
# Definir las columnas de interés para el clima general
variables <- c("TEMP", "Precipitacion.")
# Aplicar el modelo Prophet
predicciones_futuro <- lapply(variables, function(variable) {
# Preparar los datos
datos <- df_sub %>%
select(ds = FECHA, y = !!sym(variable))
# Entrenar el modelo Prophet
modelo <- prophet(datos)
# Crear el dataframe para las predicciones futuras (365 días)
futuro <- make_future_dataframe(modelo, periods = 365)
# Hacer las predicciones
prediccion <- predict(modelo, futuro)
# Graficar las predicciones directamente
ggplot(prediccion, aes(x = ds, y = yhat)) +
geom_line() +
labs(title = paste("Predicción de", variable, "para los próximos 12 meses"),
x = "Fecha", y = variable) +
theme_minimal()
})
library(ggplot2)
library(dplyr)
library(prophet)
# Reducir datos
df_sub <- df %>% tail(100000)
# Definir las columnas de interés para el clima general
variables <- c("TEMP", "Precipitacion.")
# Aplicar el modelo Prophet
predicciones_futuro <- lapply(variables, function(variable) {
# Preparar los datos
datos <- df_sub %>%
select(ds = FECHA, y = !!sym(variable))
# Entrenar el modelo Prophet
modelo <- prophet(datos)
# Crear el dataframe para las predicciones futuras (365 días)
futuro <- make_future_dataframe(modelo, periods = 365)
# Hacer las predicciones
prediccion <- predict(modelo, futuro)
# Graficar las predicciones directamente
ggplot(prediccion, aes(x = ds, y = yhat)) +
geom_line() +
labs(title = paste("Predicción de", variable, "para los próximos 12 meses"),
x = "Fecha", y = variable) +
theme_minimal()
})
library(ggplot2)
library(dplyr)
library(prophet)
# Reducir datos
df_sub <- df %>% tail(100000)
# Definir las columnas de interés para el clima general
variables <- c("TEMP", "Precipitacion.")
# Usar lapply para iterar sobre las variables y generar gráficos
lapply(variables, function(variable) {
# Preparar los datos
datos <- df_sub %>%
select(ds = FECHA, y = !!sym(variable))
# Entrenar el modelo Prophet
modelo <- prophet(datos)
# Crear el dataframe para las predicciones futuras (365 días)
futuro <- make_future_dataframe(modelo, periods = 365)
# Hacer las predicciones
prediccion <- predict(modelo, futuro)
# Crear el gráfico
plot <- ggplot(prediccion, aes(x = ds, y = yhat)) +
geom_line() +
labs(title = paste("Predicción de", variable, "para los próximos 12 meses"),
x = "Fecha", y = variable) +
theme_minimal()
# Imprimir el gráfico
print(plot)
})
View(df)
df_pro <- df %>%
group_by(FECHA) %>%
filter(Provincia == 'CAPITAL FEDERAL')
View(df_pro)
df_pro <- df %>%
group_by(FECHA) %>%
filter(Provincia == 'CAPITAL FEDERAL') %>%
summarise(TEMP = mean(TEMP),
Precip = mean(Precipitacion.))
View(df_pro)
# Ajustar el modelo
modelo <- prophet(df_pro)
df_temp <- df_pro %>%
mutate(ds = FECHA, temp = TEMP)
View(df_temp)
df_temp <- df_pro %>%
mutate(ds = FECHA, y = TEMP)
df_pro <- df %>%
group_by(FECHA) %>%
filter(Provincia == 'CAPITAL FEDERAL') %>%
summarise(TEMP = mean(TEMP),
Precip = mean(Precipitacion.))
df_temp <- df_pro %>%
mutate(ds = FECHA, y = TEMP)
# Ajustar el modelo
modelo <- prophet(df_temp)
# Generar fechas futuras para los próximos 12 meses (365 días)
futuro <- make_future_dataframe(modelo, periods = 365)
# Hacer la predicción
prediccion <- predict(modelo, futuro)
# Graficar la predicción
plot(modelo, prediccion)  # Graficar la serie temporal con la predicción
# Graficar los componentes del modelo
prophet_plot_components(modelo, prediccion)
df_pre <- df_pro %>%
mutate(ds = FECHA, y = Precip)
# Ajustar el modelo
modelo <- prophet(df_pre)
# Generar fechas futuras para los próximos 12 meses (365 días)
futuro <- make_future_dataframe(modelo, periods = 365)
# Hacer la predicción
prediccion <- predict(modelo, futuro)
# Graficar la predicción
plot(modelo, prediccion)  # Graficar la serie temporal con la predicción
# Graficar los componentes del modelo
prophet_plot_components(modelo, prediccion)
